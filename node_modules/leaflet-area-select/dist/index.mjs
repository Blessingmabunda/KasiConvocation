import s from "leaflet";
/**
 * L.Map.SelectArea - Area selection tool for leaflet
 *
 * @author Alexander Milevski <info@w8r.name>
 * @see https://github.com/w8r/leaflet-area-select
 * @license MIT
 * @preserve
 */
var r = function() {
  return !0;
};
s.Map.SelectArea = s.Map.BoxZoom.extend({
  statics: {
    /**
     * @static
     * @type {String}
     */
    SELECT_AREA_SELECTED: "selectarea:selected",
    /**
     * @static
     * @type {String}
     */
    SELECT_AREA_START: "selectarea:start",
    /**
     * @static
     * @type {String}
     */
    SELECT_AREA_TOGGLED: "selectarea:toggled"
  },
  options: {
    shiftKey: !1,
    ctrlKey: !0,
    validate: r,
    autoDisable: !1,
    cursor: "crosshair"
  },
  /**
   * @param  {L.Map} map
   * @constructor
   */
  initialize: function(t, e) {
    s.Util.setOptions(this, e || {}), s.Map.BoxZoom.prototype.initialize.call(this, t), this._validate = null, this._moved = !1, this._autoDisable = !this.options.ctrlKey && this.options.autoDisable, this._lastLayerPoint = null, this._beforeCursor = null, this.setValidate(this.options.validate), this.setAutoDisable(this.options.autoDisable);
  },
  /**
   * @param  {Function=} validate
   * @return {SelectArea}
   */
  setValidate: function(t) {
    var e = this;
    return typeof t != "function" && (t = r), this._validate = function(i) {
      return t.call(e, i);
    }, this;
  },
  /**
   * @param {Boolean} autoDisable
   */
  setAutoDisable: function(t) {
    this._autoDisable = !!t;
  },
  /**
   * @param {Boolean} on
   */
  setControlKey: function(t) {
    var e = this._enabled;
    e && this.disable(), this.options.ctrlKey = !!t, t && (this.options.shiftKey = !1), e && this.enable();
  },
  /**
   * @param {Boolean} on
   */
  setShiftKey: function(t) {
    var e = this._enabled;
    e && this.disable(), this.options.shiftKey = !!t, t && (this.options.ctrlKey = !1), e && this.enable();
  },
  /**
   * Disable dragging or zoombox
   * @param {Function=} validate
   * @param {Boolean=}  autoDisable
   */
  enable: function(t, e) {
    this.options.shiftKey ? this._map.boxZoom && this._map.boxZoom.disable() : this.options.ctrlKey || this._map.dragging.disable(), s.Map.BoxZoom.prototype.enable.call(this), this.options.ctrlKey || this._setCursor(), t && this.setValidate(t), this.setAutoDisable(e), this._map.fire(s.Map.SelectArea.SELECT_AREA_TOGGLED);
  },
  /**
   * Re-enable box zoom or dragging
   */
  disable: function() {
    s.Map.BoxZoom.prototype.disable.call(this), this.options.ctrlKey || this._restoreCursor(), this.options.shiftKey ? this._map.boxZoom && this._map.boxZoom.enable() : this._map.dragging.enable(), this._map.fire(s.Map.SelectArea.SELECT_AREA_TOGGLED);
  },
  /**
   * Also listen to ESC to cancel interaction
   * @override
   */
  addHooks: function() {
    s.Map.BoxZoom.prototype.addHooks.call(this), s.DomEvent.on(document, "keyup", this._onKeyUp, this).on(document, "keydown", this._onKeyPress, this).on(document, "contextmenu", this._onMouseDown, this).on(window, "blur", this._onBlur, this), this._map.on("dragstart", this._onMouseDown, this);
  },
  /**
   * @override
   */
  removeHooks: function() {
    s.Map.BoxZoom.prototype.removeHooks.call(this), s.DomEvent.off(document, "keyup", this._onKeyUp, this).off(document, "keydown", this._onKeyPress, this).off(document, "contextmenu", this._onMouseDown, this).off(window, "blur", this._onBlur, this), this._map.off("dragstart", this._onMouseDown, this);
  },
  /**
   * @override
   */
  _onMouseDown: function(t) {
    if (this._moved = !1, this._lastLayerPoint = null, this.options.shiftKey && !t.shiftKey || this.options.ctrlKey && !t.ctrlKey || t.which !== 1 && t.button !== 1)
      return !1;
    s.DomEvent.stop(t);
    var e = this._map.mouseEventToLayerPoint(t);
    if (!this._validate(e)) return !1;
    s.DomUtil.disableTextSelection(), s.DomUtil.disableImageDrag(), this._startLayerPoint = e, s.DomEvent.on(document, "mousemove", this._onMouseMove, this).on(document, "mouseup", this._onMouseUp, this).on(document, "keydown", this._onKeyDown, this);
  },
  /**
   * @override
   */
  _onMouseMove: function(t) {
    this._moved || (this._box = s.DomUtil.create("div", "leaflet-zoom-box", this._pane), s.DomUtil.setPosition(this._box, this._startLayerPoint), this._map.fire(s.Map.SelectArea.SELECT_AREA_START));
    var e = this._startLayerPoint, i = this._box, o = this._map.mouseEventToLayerPoint(t), a = o.subtract(e);
    if (this._validate(o)) {
      this._lastLayerPoint = o;
      var n = new s.Point(
        Math.min(o.x, e.x),
        Math.min(o.y, e.y)
      );
      s.DomUtil.setPosition(i, n), this._moved = !0, i.style.width = Math.max(0, Math.abs(a.x) - 4) + "px", i.style.height = Math.max(0, Math.abs(a.y) - 4) + "px";
    }
  },
  /**
   * General on/off toggle
   * @param  {KeyboardEvent} e
   */
  _onKeyUp: function(t) {
    t.keyCode === 27 ? this._moved && this._box && this._finish() : this.options.ctrlKey && (this._restoreCursor(), this._map.dragging.enable());
  },
  /**
   * Key down listener to enable on ctrl-press
   * @param  {KeyboardEvent} e
   */
  _onKeyPress: function(t) {
    this.options.ctrlKey && (t.ctrlKey || t.type === "dragstart") && this._beforeCursor === null && (this._setCursor(), this._map.dragging._draggable._onUp(t), this._map.dragging.disable());
  },
  /**
   * Window blur listener to restore state
   * @param  {Event} e
   */
  _onBlur: function(t) {
    this._restoreCursor(), this._map.dragging.enable();
  },
  /**
   * Set crosshair cursor
   */
  _setCursor: function() {
    this._beforeCursor = this._container.style.cursor, this._container.style.cursor = this.options.cursor;
  },
  /**
   * Restore status quo cursor
   */
  _restoreCursor: function() {
    this._container.style.cursor = this._beforeCursor, this._beforeCursor = null;
  },
  /**
   * @override
   */
  _onMouseUp: function(t) {
    this._finish();
    var e = this._map, i = this._lastLayerPoint;
    if (!(!i || this._startLayerPoint.equals(i))) {
      s.DomEvent.stop(t);
      var o = e.layerPointToLatLng(this._startLayerPoint), a = e.layerPointToLatLng(i), n = new s.LatLngBounds(o, a);
      this._autoDisable ? this.disable() : this._restoreCursor(), this._moved = !1, s.Util.requestAnimFrame(function() {
        e.fire(s.Map.SelectArea.SELECT_AREA_SELECTED, {
          bounds: n,
          start: o,
          end: a
        });
      });
    }
  }
});
s.Map.mergeOptions({
  selectArea: !1
});
s.Map.addInitHook("addHandler", "selectArea", s.Map.SelectArea);
const l = s.Map.SelectArea;
export {
  l as default
};
